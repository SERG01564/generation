import { Telegraf, session } from 'telegraf';
import { message } from 'telegraf/filters';
import dotenv from 'dotenv';

dotenv.config();

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
bot.use(session());

// –ü—Ä–∏–º–µ—Ä –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞
const questions = [
  {
    question: '–ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º?',
    options: ['JavaScript', 'Python', 'Java', 'C++'],
    correct: 0
  },
  {
    question: '–ß—Ç–æ —Ç–∞–∫–æ–µ Node.js?',
    options: ['–ë—Ä–∞—É–∑–µ—Ä', '–°—Ä–µ–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è JavaScript', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', '–§—Ä–µ–π–º–≤–æ—Ä–∫'],
    correct: 1
  }
];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.command('start', async (ctx) => {
  const keyboard = {
    inline_keyboard: [
      [{ text: '–ù–∞—á–∞—Ç—å –∫–≤–∏–∑', callback_data: 'start_quiz' }],
      [{ text: '–ü—Ä–∞–≤–∏–ª–∞', callback_data: 'rules' }]
    ]
  };
  
  await ctx.reply(
    '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑-–±–æ—Ç! üéØ\n\n' +
    '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏.',
    { reply_markup: keyboard }
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
bot.action('start_quiz', async (ctx) => {
  ctx.session.currentQuestion = 0;
  ctx.session.score = 0;
  await sendQuestion(ctx);
});

bot.action('rules', async (ctx) => {
  await ctx.reply(
    'üìã –ü—Ä–∞–≤–∏–ª–∞ –∫–≤–∏–∑–∞:\n\n' +
    '1. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤\n' +
    '2. –ù–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –µ—Å—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞\n' +
    '3. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç\n' +
    '4. –í –∫–æ–Ω—Ü–µ –≤—ã —É–∑–Ω–∞–µ—Ç–µ —Å–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n' +
    '–£–¥–∞—á–∏! üçÄ'
  );
});

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async function sendQuestion(ctx) {
  const question = questions[ctx.session.currentQuestion];
  const keyboard = {
    inline_keyboard: question.options.map((option, index) => [
      { text: option, callback_data: `answer_${index}` }
    ])
  };
  
  await ctx.reply(
    `–í–æ–ø—Ä–æ—Å ${ctx.session.currentQuestion + 1} –∏–∑ ${questions.length}:\n\n` +
    question.question,
    { reply_markup: keyboard }
  );
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
bot.action(/answer_(\d+)/, async (ctx) => {
  const answer = parseInt(ctx.match[1]);
  const question = questions[ctx.session.currentQuestion];
  
  if (answer === question.correct) {
    ctx.session.score++;
    await ctx.reply('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!');
  } else {
    await ctx.reply('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!');
  }
  
  ctx.session.currentQuestion++;
  
  if (ctx.session.currentQuestion < questions.length) {
    await sendQuestion(ctx);
  } else {
    await ctx.reply(
      `üéâ –ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n` +
      `–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${ctx.session.score} –∏–∑ ${questions.length}\n\n` +
      `–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!`
    );
  }
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(() => {
  console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
}).catch((err) => {
  console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
});

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM')); 